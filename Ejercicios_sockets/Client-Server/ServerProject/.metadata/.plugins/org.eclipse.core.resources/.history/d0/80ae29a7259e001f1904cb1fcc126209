package Server;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.List;
import Model.Book;

public class ClientHandler implements Runnable {
    private Socket clientSocket;
    private List<Book> books;

    public ClientHandler(Socket clientSocket, List<Book> books) {
        this.clientSocket = clientSocket;
        this.books = books;
    }

    @Override
    public void run() {
        try (
            BufferedReader input = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
            PrintWriter output = new PrintWriter(clientSocket.getOutputStream(), true)
        ) {
            String request;
            while ((request = input.readLine()) != null) {
                if (request.startsWith("CHECK_ISBN:")) {
                    String isbn = request.substring("CHECK_ISBN:".length());
                    Book book = findBookByISBN(isbn);
                    output.println(book != null ? book.toString() : "Book not found.");
                } else if (request.startsWith("CHECK_TITLE:")) {
                    String title = request.substring("CHECK_TITLE:".length());
                    Book book = findBookByTitle(title);
                    output.println(book != null ? book.toString() : "Book not found.");
                } else {
                    output.println("Invalid request.");
                }
            }
        } catch (IOException e) {
            System.out.println("Connection error: " + e.getMessage());
        } finally {
            try {
                clientSocket.close();
                System.out.println("Client disconnected.");
            } catch (IOException e) {
                System.out.println("Error closing client socket: " + e.getMessage());
            }
        }
    }

    private Book findBookByISBN(String isbn) {
        for (Book book : books) {
            if (book.getIsbn().equals(isbn)) {
                return book;
            }
        }
        return null;
    }

    private Book findBookByTitle(String title) {
        for (Book book : books) {
            if (book.getTitle().equalsIgnoreCase(title)) {
                return book;
            }
        }
        return null;
    }
}
