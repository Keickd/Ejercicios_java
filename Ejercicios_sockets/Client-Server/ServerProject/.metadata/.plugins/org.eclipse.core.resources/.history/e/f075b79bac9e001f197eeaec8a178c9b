package Server;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.List;
import java.util.stream.Collectors;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import Model.Book;

public class ClientHandler implements Runnable {
    private Socket clientSocket;
    private List<Book> books;
    private static final Lock lock = new ReentrantLock();

    public ClientHandler(Socket clientSocket, List<Book> books) {
        this.clientSocket = clientSocket;
        this.books = books;
    }

    @Override
    public void run() {
        try  {
        	receiveAndSendResponse();
        } catch (IOException e) {
            System.out.println("Connection error: " + e.getMessage());
        } finally {
            try {
                clientSocket.close();
                System.out.println("Client disconnected.");
            } catch (IOException e) {
                System.out.println("Error closing client socket: " + e.getMessage());
            }
        }
    }
    
    private void receiveAndSendResponse() throws IOException {
	   String request;
	   boolean exitCode = false;
	   BufferedReader input = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
       PrintWriter output = new PrintWriter(clientSocket.getOutputStream(), true);

       while ((request = input.readLine()) != null && !(exitCode = request.startsWith("EXIT"))) {
           if (request.startsWith("CHECK_ISBN:")) {
               String isbn = request.substring("CHECK_ISBN:".length());
               Book book = findBookByISBN(isbn);
               output.println(book != null ? book.toString() : "Book not found.");
           } else if (request.startsWith("CHECK_TITLE:")) {
               String title = request.substring("CHECK_TITLE:".length());
               Book book = findBookByTitle(title);
               output.println(book != null ? book.toString() : "Book not found.");
           } else if (request.startsWith("CHECK_BOOKS_BY_AUTHOR:")) {
               String author = request.substring("CHECK_BOOKS_BY_AUTHOR:".length()).trim();
               List<Book> booksByAuthor = findBooksByAuthor(author);
               
               if (booksByAuthor.isEmpty()) {
                   output.println("No books found by " + author);
               } else {
                   output.println(booksByAuthor.size());
                   for (Book book : booksByAuthor) {
                       output.println(book.toString());
                   }
               }
           }else if (request.startsWith("ADD_BOOK:")) {
               String[] bookData = request.substring("ADD_BOOK:".length()).split(",");
               if (bookData.length == 4) {
                   String isbn = bookData[0];
                   String title = bookData[1];
                   String author = bookData[2];
                   double price = Double.parseDouble(bookData[3]);
                   addBook(new Book(isbn, title, author, price), output);
               } else {
                   output.println("Invalid book data.");
               }
           else {
               output.println("Invalid request.");
           }
           
           output.println("END_RESPONSE");
       }
       if (exitCode) {
    	   System.out.println("Exiting");
       }
    }

    private Book findBookByISBN(String isbn) {
        for (Book book : books) {
            if (book.getIsbn().equals(isbn)) {
                return book;
            }
        }
        return null;
    }

    private Book findBookByTitle(String title) {
        for (Book book : books) {
            if (book.getTitle().equalsIgnoreCase(title)) {
                return book;
            }
        }
        return null;
    }
    
    private List<Book> findBooksByAuthor(String author) {
        return books.stream()
                    .filter(book -> book.getAuthor().equalsIgnoreCase(author))
                    .collect(Collectors.toList());
    }
    
    private void addBook(Book book, PrintWriter output) {
        lock.lock(); 
        try {
            books.add(book);
            output.println("Book added successfully.");
        } finally {
            lock.unlock();
        }
    }
}
